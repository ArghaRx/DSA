https://www.codingninjas.com/studio/problems/ninja%E2%80%99s-training_3621003?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf

https://takeuforward.org/data-structure/dynamic-programming-ninjas-training-dp-7/



Problem statement

Ninja is planing this ‘N’ days-long training schedule. Each day, he can perform any one of these three activities. (Running, Fighting Practice or Learning New Moves). Each activity has some merit points on each day. As Ninja has to improve all his skills, he can’t do the same activity in two consecutive days. Can you help Ninja find out the maximum merit points Ninja can earn?

You are given a 2D array of size N*3 ‘POINTS’ with the points corresponding to each day and activity. Your task is to calculate the maximum number of merit points that Ninja can earn.






// Recusive

public class Solution {
    public static int ninjaTraining(int n, int points[][]) {

        // Write your code here..
        return helper(n - 1, 3, points);
    }
    public static int helper(int day, int last, int task[][])
    {
        if(day == 0)
        {
            int maxi = 0;
            for(int i = 0; i <= 2; i++)
            {
                if(i != last)
                maxi = Math.max(maxi, task[0][i]);
            }
            return maxi;
        }
        int maxi = 0;
        for(int i = 0; i <= 2; i++)
        {
            if(i != last)
            {
                int points = task[day][i] + helper(day - 1, i, task);
                maxi = Math.max(maxi, points);
            }
        }
        return maxi;
    }

}



// Memoization 

Time Complexity: O(N*4*3)

Reason: There are N*4 states and for every state, we are running a for loop iterating three times.

Space Complexity: O(N) + O(N*4)

Reason: We are using a recursion stack space(O(N)) and a 2D array (again O(N*4)). Therefore total space complexity will be O(N) + O(N) ≈ O(N)



import java.util.*;

public class Solution {
    static int ninjaTraining(int n, int points[][]) {

        // Write your code here..
        // Initialize a memoization table with -1 values
        int dp[][] = new int[n][4];
        for (int[] row : dp)
            Arrays.fill(row, -1);
        return helper(n - 1, 3, points, dp);
    }

    static int helper(int day, int last, int task[][], int dp[][]) {

        if (day == 0) {
            int maxi = 0;
            for (int i = 0; i <= 2; i++) {
                if (i != last)
                    maxi = Math.max(maxi, task[0][i]);
            }
            return maxi;
        }

        if (dp[day][last] != -1) return dp[day][last];
        
        int maxi = 0;
        for (int i = 0; i < 3; i++) {
            if (i != last) {
                int points = task[day][i] + helper(day - 1, i, task, dp);
                maxi = Math.max(maxi, points);
            }
        }
        return dp[day][last] = maxi;
    }
}


// Tabulation

Time Complexity: O(N*4*3)

Reason: There are three nested loops

Space Complexity: O(N*4)

Reason: We are using an external array of size ‘N*4’’.



import java.util.*;
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {

        // Write your code here..
        int dp[][] = new int[n][4];
    
       // Base case
       dp[0][0] = Math.max(points[0][1], points[0][2]);
       dp[0][1] = Math.max(points[0][0], points[0][2]);
       dp[0][2] = Math.max(points[0][1], points[0][0]);
       dp[0][3] = Math.max(points[0][0],Math.max(points[0][1], points[0][2]));


       // Iterate through each day and each activity
        for (int day = 1; day < n; day++) {

            for (int last = 0; last < 4; last++) {

                dp[day][last] = 0; // Initialize the maximum points for the current day and last activity
                                                   
	// Consider each possible task for the current day
                for (int task = 0; task <= 2; task++) {

                    if (task != last) { // Ensure that the current task is different from the last

                        // Calculate the points for the current activity and add it to the maximum points from the previous day
                        int activity = points[day][task] + dp[day - 1][task];

                        // Update the maximum points for the current day and last activity
                        dp[day][last] = Math.max(dp[day][last], activity);
                    }
                }
            }
        }

        // Return the maximum points achievable after all days (last activity is 3)
        return dp[n - 1][3];


    }
}
//     


// Space Optimization


import java.util.*;
public class Solution {
    public static int ninjaTraining(int n, int points[][]) {

       // Initialize an array 'prev' to store the maximum points for the previous day
        int prev[] = new int[4];

        // Initialize the first day's maximum points based on the available choices
        prev[0] = Math.max(points[0][1], points[0][2]);
        prev[1] = Math.max(points[0][0], points[0][2]);
        prev[2] = Math.max(points[0][0], points[0][1]);
        prev[3] = Math.max(points[0][0], Math.max(points[0][1], points[0][2]));

        // Iterate through each day starting from the second day
        for (int day = 1; day < n; day++) {

            // Initialize an array 'temp' to store the maximum points for the current day
            int temp[] = new int[4];

            for (int last = 0; last < 4; last++) {

                temp[last] = 0;   // Initialize the maximum points for the current day and last activity

                // Consider each possible task for the current day
                for (int task = 0; task <= 2; task++) {

                    if (task != last) {     // Ensure that the current task is different from the last

                        // Calculate the points for the current activity and add it to the maximum points from the previous day
                        temp[last] =  Math.max(temp[last],  points[day][task] + prev[task]);
                    }
                }
            }

            // Update 'prev' to store the maximum points for the current day
            prev = temp;
        }

        // Return the maximum points achievable after all days (last activity is 3)
        return prev[3];
    }


    
}



 

