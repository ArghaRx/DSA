https://leetcode.com/problems/unique-paths/



// Recursion


class Solution {
    public int uniquePaths(int m, int n) {
        return helper(m - 1, n - 1);
    }
    public int helper(int i, int j)
    {
        //Base Condition
        if(i == 0 && j == 0) return 1; // This mean we get a path

        // Out of Boundary
        if(i < 0 || j < 0) return 0;

        int up = 0;
        up = helper(i - 1, j);
        int left = 0;
        left = helper(i, j - 1);

        return up + left;
    }
}



// Memoization


class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][] = new int[m][n];
        for(int row[] : dp)
         Arrays.fill(row, -1);
        return helper(m - 1, n - 1, dp);
    }
    public int helper(int i, int j, int dp[][])
    {
        //Base Condition
        if(i == 0 && j == 0) return 1;
        // Out of Boundary
        if(i < 0 || j < 0) return 0;
        
        if(dp[i][j] != -1) return dp[i][j];

        int up = 0;
        up = helper(i - 1, j, dp);
        int left = 0;
        left = helper(i, j - 1, dp);

        return dp[i][j] = up + left;
    }
}


// Tabulation


class Solution {
    public int uniquePaths(int m, int n) {
        int dp[][] = new int[m][n];
        for (int row[] : dp)
            Arrays.fill(row, -1);
            return countWaysUtil(m, n, dp);
    }
        


// Function to count the number of ways to reach cell (m, n)

    public int countWaysUtil(int m, int n, int[][] dp) {
        // Loop through each cell in the grid
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                // Base condition: If we are at the top-left cell (0, 0), there's one way to reach it.
                if (i == 0 && j == 0) {
                    dp[i][j] = 1;
                    continue;
                }

                int up = 0;
                int left = 0;

                // Calculate the number of ways by moving up (if possible) and left (if possible)
                if (i > 0)
                    up = dp[i - 1][j];
                if (j > 0)
                    left = dp[i][j - 1];

                // Store the total number of ways to reach the current cell in the DP array
                dp[i][j] = up + left;
            }
        }

        // Return the number of ways to reach the bottom-right cell (m-1, n-1)
        return dp[m - 1][n - 1];
    }

}


// SPACE Optimization

class Solution {
    public int uniquePaths(int m, int n) {
        // Create an array to store the results for the previous row
        int prev[] = new int[n];

        for (int i = 0; i < m; i++) {
            // Create a temporary array to store the results for the current row
            int temp[] = new int[n];

            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0) {
                    // Base condition: There's one way to reach the top-left cell (0, 0)
                    temp[j] = 1;
                    continue;
                }

                int up = 0;
                int left = 0;

                // Calculate the number of ways by moving up (if possible) and left (if
                // possible)
                if (i > 0)
                    up = prev[j];
                if (j > 0)
                    left = temp[j - 1];

                // Store the total number of ways to reach the current cell in the temporary
                // array
                temp[j] = up + left;
            }

            // Set the temporary array as the previous array for the next row
            prev = temp;
        }

        // Return the number of ways to reach the bottom-right cell (m-1, n-1)
        return prev[n - 1];
    }

}
