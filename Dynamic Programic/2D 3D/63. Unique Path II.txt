https://leetcode.com/problems/unique-paths-ii/description/


1 --> mean obstacle
0 --> space to go

*** extra edge case ****
if(i >= 0 && j >= 0 && arr[i][j] = 1)  return 0;




// Recursion


class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;

        return helper(m - 1, n - 1, obstacleGrid);
    }

    public int helper(int i, int j, int[][] obstacleGrid)
    {
        //Extra base case
        if(i >= 0 && j >= 0 && obstacleGrid[i][j] == 1) return 0;

        //Base case
        if(i == 0 && j == 0) return 1;
        if(i < 0 || j < 0) return 0;

        int up = helper(i - 1, j, obstacleGrid);

        int left = helper(i, j - 1, obstacleGrid);

        return up + left;
    }
}



// Memoization


Time Complexity: O(N*M)

Reason: At max, there will be N*M calls of recursion.

Space Complexity: O((M-1)+(N-1)) + O(N*M)

Reason: We are using a recursion stack space:O((M-1)+(N-1)), here (M-1)+(N-1) is the path length and an external DP Array of size ‘N*M’.



class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int dp[][] = new int[m][n];

        for(int row[] : dp)
        Arrays.fill(row, -1);

        return helper(m - 1, n - 1, obstacleGrid, dp);
    }

    public int helper(int i, int j, int[][] obstacleGrid, int dp[][])
    {
        //Extra base case
        if(i >= 0 && j >= 0 && obstacleGrid[i][j] == 1) return 0;

        //Base case
        if(i == 0 && j == 0) return 1;
        if(i < 0 || j < 0) return 0;

        if(dp[i][j] != -1) return dp[i][j];

        int up = helper(i - 1, j, obstacleGrid, dp);

        int left = helper(i, j - 1, obstacleGrid, dp);

        return dp[i][j] = up + left;
    }
}






// Tabulation


Time Complexity: O(M*N)

Reason: There are two nested loops

Space Complexity: O(M*N)

Reason: We are using an external array of size ‘M*N’’.



class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int dp[][] = new int[m][n];

        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                // Obstacle find
                if(obstacleGrid[i][j] == 1)
                {
                    dp[i][j] = 0;
                }
                 //Base case
                // if(i == 0 && j == 0) return 1;
                 else if(i == 0 && j == 0)
                {
                    dp[i][j] = 1;
                }
                else{               
                    int up = 0;
                    int left = 0;
                    if(i > 0) up = dp[i - 1][j];

                    if(j > 0) left = dp[i][j - 1];

                    dp[i][j] = up + left;
                }                 
            }
        }
            return dp[m - 1][n - 1];
    }
}









// Space Optimization



Time Complexity: O(M*N)

Reason: There are two nested loops

Space Complexity: O(N)

Reason: We are using an external array of size ‘N’ to store only one row.



class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length; // no of row = length of col
        int n = obstacleGrid[0].length; // no of col = length of row
        //int dp[][] = new int[m][n];
        int prev[] = new int[n];

        for(int i = 0; i < m; i++)
        {
            int temp[] = new int[n];
            for(int j = 0; j < n; j++)
            {
                // Base conditions
                if (obstacleGrid[i][j] == 1) {
                    temp[j] = 0; // If there's an obstacle, no paths can go through here.
                }


                 //Base case
                // if(i == 0 && j == 0) return 1;
                 else if(i == 0 && j == 0)
                {
                    temp[j] = 1;
                }

                else{
                    //left               
                    int up = 0;
                    if(i > 0) up = prev[j];

                    //left
                    int left = 0;
                    if(j > 0) left = temp[j - 1];

                    temp[j] = up + left;
                }                 
            }
            prev = temp;
        }
            return prev[n - 1];
    }
}




       

       