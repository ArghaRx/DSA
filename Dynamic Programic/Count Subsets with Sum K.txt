From codeninja

Sample Input 1 :
4 5
1 4 4 5

Sample Output 1 :
 3

Explanation For Sample Output 1:
The possible ways are:
[1, 4]
[1, 4]
[5]
Hence the output will be 3. Please note that both 1 present in 'arr' are treated differently.






1. Recursion

Tc - O(2^N) SC -O(N)

import java.util.*;
import java.io.*;

public class Solution {
    public static int findWays(int num[], int tar) {
        // Write your code here.
        return helper(num, num.length - 1, tar);
    }

	
	public static  int helper(int arr[], int ind, int target)
    {
        if(target == 0) return 1;
        
        if(ind == 0)
        {
            if(arr[0] == target) return 1;
            else return 0;
        }
        // if(ind == 0) return arr[0] == target ? 1 : 0;

        int notPick = helper(arr, ind - 1, target);
        int pick = 0;
        if(arr[ind] <= target)
        pick = helper(arr, ind - 1, target - arr[ind]);

        return pick + notPick;
    }

}





2. Memoization

Tc - O(n * target) 
SC -O(N) + O(n * target)


import java.util.*;
import java.io.*;

public class Solution {
    public static int findWays(int num[], int tar) {
        // Write your code here.
        int dp[][] = new int[num.length][tar + 1];
        for(int row[] : dp) Arrays.fill(row, -1);
        return helper(num, num.length - 1, tar, dp);
    }

	
	public static  int helper(int arr[], int ind, int target, int dp[][])
    {
        if(target == 0) return 1;
        
        if(ind == 0)
        {
            if(arr[0] == target) return 1;
            else return 0;
        }
        // if(ind == 0) return arr[0] == target ? 1 : 0;

        if(dp[ind][target] != -1) return dp[ind][target];

        int notPick = helper(arr, ind - 1, target, dp);
        int pick = 0;
        if(arr[ind] <= target)
        pick = helper(arr, ind - 1, target - arr[ind], dp);

        return dp[ind][target] = pick + notPick;
    }

}
------------------------------------------------------------------

class Solution{

	public int perfectSum(int arr[], int n, int sum) 
    { 
          int mod = (int)1e9+7;
        int dp[][] = new int[n + 1][sum + 1];
        for(int row[] : dp) Arrays.fill(row, -1);

        return helper(arr, n - 1, sum, dp, mod);
    } 
	
    public int helper(int arr[], int ind, int target, int dp[][], int mod) {
        if (target == 0)
            return 1;
        if (ind == 0)
            return arr[0] == target ? 1 : 0;
        if (dp[ind][target] != -1)
            return dp[ind][target];
        
        int notPick = helper(arr, ind - 1, target, dp, mod);
        int pick = 0;
        if (arr[ind] <= target)
            pick = helper(arr, ind - 1, target - arr[ind], dp, mod);

        return dp[ind][target] = (pick + notPick) % mod;

    }
}

---------------------------------------------------------------------------




3.Tabulation


import java.util.*;
import java.io.*;

public class Solution {
    public static int findWays(int num[], int k) {
        // Write your code here.
        int n = num.length;
        int dp[][] = new int[n][k + 1];
        
        for(int ind = 0; ind < n; ind++)
        dp[ind][0] = 1;

     // important case if arr[0] <= target
     if(num[0] <= k)
       dp[0][num[0]] = 1;
        
        // if(ind == 0)
        // {
        //     if(arr[0] == target) return 1;
        //     else return 0;
        // }
        // if(ind == 0) return arr[0] == target ? 1 : 0;

        for(int ind = 1; ind < n; ind++)
        {
            for(int target = 1; target <= k; target++)
            {
                 int notPick = dp[ind - 1][target];
                 int pick = 0;
                if(num[ind] <= target)
                 pick = dp[ind - 1][target - num[ind]];

                 dp[ind][target] = pick + notPick;
            }
        }
        return dp[n - 1][k];
       
    }

}





4. Space optimization


import java.util.*;
import java.io.*;

public class Solution {
    public static int findWays(int num[], int k) {
        // Write your code here.
           int n = num.length;

        // Create a 2D DP array to store the number of ways to achieve each target sum
        int[][] dp = new int[n][k + 1];

        // Initialize the first row of the DP array
        for (int i = 0; i < n; i++) {
            dp[i][0] = 1;
        }

        // Initialize the first column of the DP array
        if (num[0] <= k) {
            dp[0][num[0]] = 1;
        }

        // Fill in the DP array using bottom-up dynamic programming
        for (int ind = 1; ind < n; ind++) {
            for (int target = 1; target <= k; target++) {
                // Calculate the number of ways when the current element is not taken
                int notTaken = dp[ind - 1][target];

                // Calculate the number of ways when the current element is taken
                int taken = 0;
                if (num[ind] <= target) {
                    taken = dp[ind - 1][target - num[ind]];
                }

                // Update the DP array for the current element and target sum
                dp[ind][target] = notTaken + taken;
            }
        }

        // The result is stored in the last cell of the DP array
        return dp[n - 1][k];
    }
}