 1.  Memoization


import java.util.*;

public class Solution {
    public static String findLCS(int n, int m, String s1, String s2) {
        int dp[][] = new int[n + 1][m + 1];
        for (int[] row : dp)
            Arrays.fill(row, -1);

        int length = helper(n - 1, m - 1, s1, s2, dp);

        String[] str = new String[length];
        int index = length - 1;

        for (int i = n; i >= 1; i--) {
            for (int j = m; j >= 1; j--) {
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    str[index] = String.valueOf(s1.charAt(i - 1));  // to convert the character to a string.
                    index--;
                } else {
                    if (s1.charAt(i - 1) >= s2.charAt(j - 1))
                        i = i - 1;
                    else
                        j = j - 1;
                }
            }
        }

        return String.join("", str);
    }
    
      public static int helper(int ind1, int ind2, String s1, String s2, int dp[][]) {
        if (ind1 < 0 || ind2 < 0)
            return 0;

        if (dp[ind1][ind2] != -1)
            return dp[ind1][ind2];

        if (s1.charAt(ind1) == s2.charAt(ind2))
            return 1 + helper(ind1 - 1, ind2 - 1, s1, s2, dp);

        return dp[ind1][ind2] = Math.max(helper(ind1 - 1, ind2, s1, s2, dp), helper(ind1, ind2 - 1, s1, s2, dp));
    }
}







2. Tabulation

// here i use string.valueOf, string.join() function-------------

import java.util.*;

public class Solution {
    public static String findLCS(int n, int m, String s1, String s2) {

       int dp[][]=new int[n+1][m+1];
    for(int i=0;i<=n;i++){
        dp[i][0] = 0;
    }
    for(int i=0;i<=m;i++){
        dp[0][i] = 0;
    }
    
    // create the dp
    for(int ind1 = 1; ind1 <= n; ind1++){
        for(int ind2 = 1; ind2 <= m; ind2++){
            if(s1.charAt(ind1 - 1) == s2.charAt(ind2 - 1))
                dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1];
            else
                dp[ind1][ind2] = 0 + Math.max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1]);
        }
    }
    
        int length = dp[n][m];
        String[] str = new String[length];
        int index = length - 1;

        for (int i = n; i >= 1; i--) {
            for (int j = m; j >= 1; j--) {
                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                    str[index] = String.valueOf(s1.charAt(i - 1));  // to convert the character to a string.
                    index--;
                } else {
                    if (s1.charAt(i - 1) >= s2.charAt(j - 1))
                        i = i - 1;
                    else
                        j = j - 1;
                }
            }
        }

        return String.join("", str);
    }
}
    


     // without  string.valueOf, string.join() function___________

    // using stringbuilder()



import java.util.*;

public class Solution {
    public static String findLCS(int n, int m, String s1, String s2) {

       int dp[][]=new int[n+1][m+1];
    for(int i=0;i<=n;i++){
        dp[i][0] = 0;
    }
    for(int i=0;i<=m;i++){
        dp[0][i] = 0;
    }
    
    // create the dp
    for(int ind1 = 1; ind1 <= n; ind1++){
        for(int ind2 = 1; ind2 <= m; ind2++){
            if(s1.charAt(ind1 - 1) == s2.charAt(ind2 - 1))
                dp[ind1][ind2] = 1 + dp[ind1 - 1][ind2 - 1];
            else
                dp[ind1][ind2] = 0 + Math.max(dp[ind1 - 1][ind2], dp[ind1][ind2 - 1]);
        }
    }
    int len=dp[n][m];
    int i=n;
    int j=m;
    
    int index = len-1;
    String str="";
    for(int k=1; k<=len;k++){
        str +="$"; // dummy string
    }
    StringBuilder ss= new StringBuilder(s1);
    StringBuilder str2=new StringBuilder(str);
    while(i>0 && j>0){
        if(ss.charAt(i-1) == s2.charAt(j-1)){
            str2.setCharAt(index,ss.charAt(i-1) ); 
            index--;
            i--;
            j--;
        }
        else if(ss.charAt(i-1)>s2.charAt(j-1)){
            i--;
        }
        else j--;
    }
    // System.out.println(str2);
    return str2.toString();
}
}
    
     
