

1. Recursion

class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length;
        int totalsum = 0;
        for(int i = 0; i < n; i++)
        totalsum += nums[i];

        if(totalsum - target < 0 || (totalsum - target) % 2 == 1)
        return 0;

        int s2 = (totalsum - target) / 2;
        return helper(nums, s2, n - 1);
    }

    public int helper(int arr[], int target, int ind)
    {
        if(target == 0) return 1;
        
        // Base case: If we have reached the first element
        if (ind == 0) {
            // Check if the target is 0 and the first element is also 0
            if (target == 0 && arr[0] == 0)
                return 2;
            // Check if the target is equal to the first element or 0
            if (target == 0 || target == arr[0])
                return 1;
            return 0;
        }

        int notPick = helper(arr, target, ind - 1);
        int pick = 0;
        if(arr[ind] <= target)
        pick = helper(arr, target - arr[ind], ind - 1);

        return pick + notPick;     
    }
}









2. Memoization

class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length;
        int totalsum = 0;
        for(int i = 0; i < n; i++)
        totalsum += nums[i];

        if(totalsum - target < 0 || (totalsum - target) % 2 == 1)
        return 0;

        int s2 = (totalsum - target) / 2;
        
        int dp[][] = new int[n][target + 1];
        for(int row[] : dp) 
        Arrays.fill(row, -1);
        
        return helper(nums, s2, n - 1, dp);
    }
    public int helper(int arr[], int target, int ind, int dp[][])
    {
        if(target == 0) return 1;
        
        // Base case: If we have reached the first element
        if (ind == 0) {
            // Check if the target is 0 and the first element is also 0
            if (target == 0 && arr[0] == 0)
                return 2;
            // Check if the target is equal to the first element or 0
            if (target == 0 || target == arr[0])
                return 1;
            return 0;
        }

        // If the result for this subproblem has already been calculated, return it
        if (dp[ind][target] != -1)
            return dp[ind][target];

        int notPick = helper(arr, target, ind - 1, dp);
        int pick = 0;
        if(arr[ind] <= target)
        pick = helper(arr, target - arr[ind], ind - 1, dp);

        return dp[ind][target] = pick + notPick;     
    }
}













3. Tabulation

class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length;
        int totalsum = 0;
        for(int i = 0; i < n; i++)
        totalsum += nums[i];

        if(totalsum - target < 0 || (totalsum - target) % 2 == 1)
        return 0;

        int s2 = (totalsum - target) / 2;
        
        int dp[][] = new int[n][s2 + 1];
    
       // Base case 2
       //If target == 0, ind can take any value from 0 to n-1
       for(int i = 0; i < n; i++)
       dp[i][0] = 1;

      // Base case 2
      // ind always 0 if arr[0] == 0 the it gives 2 value either take or not take
       if(nums[0] == 0)
		  dp[0][0] = 2;

		else
		{
			dp[0][0] = 1;

          		   // target == arr[0]
			if(nums[0] <= s2) // condition must 
			{
				dp[0][nums[0]] = 1;
			}
        }

     
     for(int ind = 1; ind < n; ind++)
     {
        for(int T = 0; T <= s2; T++)
        {
        int notPick = dp[ind - 1][T];
        int pick = 0;
        if(nums[ind] <= T)
        pick = dp[ind - 1][T - nums[ind]];

        dp[ind][T] = pick + notPick;     
        }
     }

     return dp[n - 1][s2];
    }
}





4. Space Optimization

class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        int n = nums.length;
        int totalsum = 0;
        for(int i = 0; i < n; i++)
        totalsum += nums[i];

        if(totalsum - target < 0 || (totalsum - target) % 2 == 1)
        return 0;

        int s2 = (totalsum - target) / 2;
        
        int prev[] = new int[s2 + 1];
    
       // Base case 2
       //If target == 0, ind can take any value from 0 to n-1
       for(int i = 0; i < n; i++)
       prev[0] = 1;

      // Base case 2
      // ind always 0 if arr[0] == 0 the it gives 2 value either take or not take
       if(nums[0] == 0)
		  prev[0] = 2;

		else
		{
			prev[0] = 1;

            // target == arr[0]
			if(nums[0] <= s2) // condition must 
			{
				prev[nums[0]] = 1;
			}
        }

     
     for(int ind = 1; ind < n; ind++)
     {
        int cur[] = new int[s2 + 1];
        for(int T = 0; T <= s2; T++)
        {
        int notPick = prev[T];
        int pick = 0;
        if(nums[ind] <= T)
        pick = prev[T - nums[ind]];

        cur[T] = pick + notPick;     
        }
        prev = cur;
     }

     return prev[s2];
    }
}