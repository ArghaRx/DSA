1. Recursion

class Solution {
    public boolean canPartition(int[] nums) {
        // calculate tota sm
        int sum = 0;
        for(int i = 0; i < nums.length; i++)
        sum += nums[i];
        // if sum is odd then divide two part is  not possible
        if(sum % 2 != 0) return false;
        // otherwise call
        // with sum / 2
        return helper(nums.length - 1, nums, sum / 2);
    }

    public boolean helper(int ind, int arr[], int target)
    {
        // Base case1
        if(target == 0) return true;
        // Base case2
        if(ind == 0) return arr[0] == target;

        boolean notTake = helper(ind - 1, arr, target);
        boolean take = false;
        if(target >= arr[ind])
        take = helper(ind - 1, arr, target - arr[ind]);

        return take || notTake;
    }
}



2.Memoization

class Solution {
    public boolean canPartition(int[] nums) {
        // calculate tota sm
        int sum = 0;
        for(int i = 0; i < nums.length; i++)
        sum += nums[i];
        // if sum is odd then divide two part is  not possible
        if(sum % 2 != 0) return false;
        // otherwise call
        // with sum / 2
        int target = sum / 2;
        int dp[][] = new int[nums.length][target + 1];
        for(int row[] : dp)
        Arrays.fill(row, -1);
        return helper(nums.length - 1, nums, target, dp);
    }

    public boolean helper(int ind, int arr[], int target, int dp[][])
    {
        // Base case1
        if(target == 0) return true;
        // Base case2
        if(ind == 0) return arr[0] == target;

        if(dp[ind][target] != -1) return dp[ind][target] == 0 ? false : true;

        boolean notTake = helper(ind - 1, arr, target, dp);
        boolean take = false;
        if(target >= arr[ind])
        take = helper(ind - 1, arr, target - arr[ind], dp);
        
        dp[ind][target] = take || notTake ? 1 : 0;
        return take || notTake;
    }
}




3. Tabulation

class Solution {
    public boolean canPartition(int[] nums) {
        // calculate tota sm
        int sum = 0;
        for(int i = 0; i < nums.length; i++)
        sum += nums[i];
        // if sum is odd then divide two part is  not possible
        if(sum % 2 == 1) return false;
        // otherwise call
        // with sum / 2
        else
        {
        // Calculate the target sum for each subset
        int k = sum / 2;
        boolean dp[][] = new boolean[nums.length][k + 1];
        
        // Base case1
        // if(target == 0) return true;
        for(int ind = 0; ind < nums.length; ind++)
        dp[ind][0] = true;

        // Base case2
        // if(ind == 0) return arr[0] == target;
        if(k >= nums[0])
        dp[0][nums[0]] = true;


        for(int ind = 1; ind < nums.length; ind++)
        {
            for(int target = 1; target <= k; target++)
            {
                 boolean notTake = dp[ind - 1][target];
                 boolean take = false;
                 if(target >= nums[ind])
                  take = dp[ind - 1][target - nums[ind]];
        
                dp[ind][target] = take || notTake;
               
            }
        }
        
        return dp[nums.length - 1][k];
     }
       
    }
}




4. Space Optimization

class Solution {
    public boolean canPartition(int[] nums) {
        // calculate tota sm
        int sum = 0;
        for(int i = 0; i < nums.length; i++)
        sum += nums[i];
        // if sum is odd then divide two part is  not possible
        if(sum % 2 == 1) return false;
        else {
            // Calculate the target sum for each subset
            int k = sum / 2;
            // Create two arrays to store the DP results for the previous and current rows
            boolean prev[] = new boolean[k + 1];

            // Initialize the first row of the DP table
            prev[0] = true;

            // Initialize the first column of the DP table
            if (nums[0] <= k) {
                prev[nums[0]] = true;
            }

            // Fill in the DP table using bottom-up dynamic programming
            for (int ind = 1; ind < nums.length; ind++) {
                boolean cur[] = new boolean[k + 1];
                cur[0] = true;
                for (int target = 1; target <= k; target++) {
                    // Calculate if the current element is not taken
                    boolean notTaken = prev[target];

                    // Calculate if the current element is taken
                    boolean taken = false;
                    if (nums[ind] <= target) {
                        taken = prev[target - nums[ind]];
                    }

                    // Update the DP table for the current element and target sum
                    cur[target] = notTaken || taken;
                }
                // Update the previous row with the current row for the next iteration
                prev = cur;
            }

            // The result is stored in the last cell of the DP table
            return prev[k];
        }
    }
       
}