
 Subset Sum Equal To K




1. Recursion


TC - O(2^N) for each element there is 2 possibilities
SC - O(N) Auxilary Stack Space


import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
        return helper(n - 1, k, arr);
    }

    public static boolean helper(int ind, int target, int arr[])
    {
        // Base Case
        if(target == 0) return true;
        if(ind == 0) return arr[0] == target;

        boolean notTaken = helper(ind - 1, target, arr);
        boolean taken = false;
        if(target >= arr[ind])
        taken = helper(ind - 1, target - arr[ind], arr);

        return notTaken || taken;
    }
}





2. Memoization

you're initializing your dp array with dimensions n rows and k columns, but later in the helper method, you're accessing elements using indices ind and target, which can exceed the dimensions of the dp array.
To fix this error, you should initialize your dp array with dimensions (n + 1) x (k + 1) to accommodate the base cases and the range of indices you're accessing in the helper method


TC - O(n * k)
SC - O(n * k) + O(N) 


import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
        int dp[][] = new int[n + 1][k + 1];
        for(int row[] : dp)
        Arrays.fill(row, -1);
        return helper(n - 1, k, arr, dp);
    }
    public static boolean helper(int ind, int target, int[] arr, int[][] dp) {
        // If the target sum is achieved, return true
        if (target == 0)
            return true;

        // If we have considered all elements but haven't reached the target, return false
        if (ind == 0)
            return arr[0] == target;

        // If the result for this subproblem has already been calculated, return it
        if (dp[ind][target] != -1)
            return dp[ind][target] == 0 ? false : true;

        // Try not taking the current element
        boolean notTaken = helper(ind - 1, target, arr, dp);

        // Try taking the current element if it doesn't exceed the target
        boolean taken = false;
        if (arr[ind] <= target)
            taken = helper(ind - 1, target - arr[ind], arr, dp);

        // Store the result in the DP table and return whether either option was successful
        dp[ind][target] = notTaken || taken ? 1 : 0;
        return notTaken || taken;
    }
}




3. Tabulation

TC - O(n * k)
SC - O(n * k) 


import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
       boolean dp[][] = new boolean[n + 1][k + 1];
    
    // Base case 1
    for(int ind = 0;  ind < n; ind++) 
    dp[ind][0] = true;        

    // Base case 2
    if (arr[0] <= k) 
    dp[0][arr[0]] = true;        


    for(int ind = 1; ind < n; ind++)
    {
        for(int target = 1; target <= k; target++)
        {
         // Try not taking the current element
        boolean notTaken = dp[ind - 1][target];

        // Try taking the current element if it doesn't exceed the target
        boolean taken = false;
        if (arr[ind] <= target)
        taken = dp[ind - 1][target - arr[ind]];

        // Store the result in the DP table
        dp[ind][target] = notTaken || taken;
        }
    }
        return dp[n - 1][k];
    }
}





4. Space Optimization


TC - O(n * k)
SC -  O(K)       Reason: We are using an external array of size ‘K+1’ to store only one row.



import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean subsetSumToK(int n, int k, int[] arr) {
        // Create an array to store the previous row of the DP table
        boolean prev[] = new boolean[k + 1];
        
        // Initialize the first row of the DP table
        prev[0] = true;

        // Initialize the first column of the DP table
        if (arr[0] <= k) {
            prev[arr[0]] = true;
        }

        // Fill in the DP table using bottom-up approach
        for (int ind = 1; ind < n; ind++) {
            // Create an array to store the current row of the DP table
            boolean cur[] = new boolean[k + 1];
            
            // Initialize the first column of the current row
            cur[0] = true;
            
            for (int target = 1; target <= k; target++) {
                // Calculate if the current target can be achieved without taking the current element
                boolean notTaken = prev[target];
                
                // Calculate if the current target can be achieved by taking the current element
                boolean taken = false;
                if (arr[ind] <= target) {
                    taken = prev[target - arr[ind]];
                }
                
                // Store the result in the current row of the DP table
                cur[target] = notTaken || taken;
            }
            
            // Update the previous row with the current row
            prev = cur;
        }

        // The final result is stored in the last cell of the previous row
        return prev[k];
    }
}




    

    
       
