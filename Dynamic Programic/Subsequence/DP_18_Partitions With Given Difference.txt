Partitions With Given Difference
DP - 18




1. recursion

import java.util.* ;
import java.io.*; 
public class Solution {
	public static int countPartitions(int n, int d, int[] arr) {
		// Write your code here.
		int totalSum = 0;
		for(int i = 0; i < n; i++)
		totalSum += arr[i];
		
		// Edge case...
		if(totalSum - d < 0) return 0;
		if((totalSum - d) % 2 == 1) return 0;

		int target = (totalSum - d)  / 2;

		return helper(n - 1, target, arr);
	}
	
	public static int helper(int ind, int target, int arr[])
	{
		
		if(ind == 0)
		{
			if(target == 0 && arr[0] == 0) return 2;
			if(target == 0 ||  target == arr[0]) return 1;
			return 0;
		}

		int notPick = helper(ind - 1, target, arr);
		int pick = 0;
		if(arr[ind] <= target)
		pick = helper(ind - 1, target - arr[ind], arr);

		return (pick + notPick) % (int)(Math.pow(10, 9) + 7);
	}
}




2. Memoization


import java.util.* ;
import java.io.*; 
public class Solution {
	public static int countPartitions(int n, int d, int[] arr) {
		// Write your code here.
		int totalSum = 0;
		for(int i = 0; i < n; i++)
		totalSum += arr[i];

		if(totalSum - d < 0) return 0;
		if((totalSum - d) % 2 == 1) return 0;

		int target = (totalSum - d)  / 2;
		int dp[][] = new int[n][target + 1];
		for(int row[] : dp)
		Arrays.fill(row, -1);

		return helper(n - 1, target, arr, dp);
	}
	
	public static int helper(int ind, int target, int arr[], int dp[][])
	{
		
		if(ind == 0)
		{
			if(target == 0 && arr[0] == 0) return 2;
			if(target == 0 ||  target == arr[0]) return 1;
			return 0;
		}

		if(dp[ind][target] != -1) return dp[ind][target];

		int notPick = helper(ind - 1, target, arr, dp);
		int pick = 0;
		if(arr[ind] <= target)
		pick = helper(ind - 1, target - arr[ind], arr, dp);

		return dp[ind][target] = (pick + notPick) % (int)(Math.pow(10, 9) + 7);
	}
}





3. Tabulation



import java.util.* ;
import java.io.*; 
public class Solution {
	public static int countPartitions(int n, int d, int[] arr) {
		// Write your code here.
		int totalSum = 0;
		for(int i = 0; i < n; i++)
		totalSum += arr[i];

		if(totalSum - d < 0) return 0;
		if((totalSum - d) % 2 == 1) return 0;

		int s2 = (totalSum - d)  / 2;
		int dp[][] = new int[n][s2 + 1];
	
		
		if(arr[0] == 0)
		  dp[0][0] = 2;

		else
		{
			dp[0][0] = 1;
			if(arr[0] <= s2)
			{
				dp[0][arr[0]] = 1;
			}
		}


		// if(ind == 0)
		// {
		// 	if(target == 0 && arr[0] == 0) return 2;
		// 	if(target == 0 ||  target == arr[0]) return 1;
		// 	return 0;
		// }

		// if(dp[ind][target] != -1) return dp[ind][target];




		for(int ind = 1; ind < n; ind++)
		{
			for(int target = 0; target <= s2; target++)
			{
					int notPick = dp[ind - 1][target];
	 				int pick = 0;
					if(arr[ind] <= target)
					pick = dp[ind - 1][target - arr[ind]];

					dp[ind][target] = (pick + notPick) % (int)(Math.pow(10, 9) + 7);
			}
		}
		return dp[n - 1][s2];
	}
}





4. Space Optimization


import java.util.* ;
import java.io.*; 
public class Solution {
	public static int countPartitions(int n, int d, int[] arr) {
		// Write your code here.
		int totalSum = 0;
		for(int i = 0; i < n; i++)
		totalSum += arr[i];

		if(totalSum - d < 0) return 0;
		if((totalSum - d) % 2 == 1) return 0;

		int s2 = (totalSum - d)  / 2;
		int prev[] = new int[s2 + 1];
	
		
		if(arr[0] == 0)
		prev[0] = 2;

		else
		{
			prev[0] = 1;
			if(arr[0] <= s2)
			{
				prev[arr[0]] = 1;
			}
		}

		// if(ind == 0)
		// {
		// 	if(target == 0 && arr[0] == 0) return 2;
		// 	if(target == 0 ||  target == arr[0]) return 1;
		// 	return 0;
		// }

		// if(dp[ind][target] != -1) return dp[ind][target];

		for(int ind = 1; ind < n; ind++)
		{
			int cur[] = new int[s2 + 1];
			for(int target = 0; target <= s2; target++)
			{
					int notPick = prev[target];
	 				int pick = 0;
					if(arr[ind] <= target)
					pick = prev[target - arr[ind]];

					cur[target] = (pick + notPick) % (int)(Math.pow(10, 9) + 7);
			}
			prev = cur;
		}
		return prev[s2];
	}
}

