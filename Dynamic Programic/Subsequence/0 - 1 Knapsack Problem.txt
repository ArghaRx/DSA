0 - 1 Knapsack Problem


----------------------------------------------------------------------------

n = 3               weight[] = {3,4,5}       value[] = {30,40,50}    bag weight 'W' = 8

have to steal value such that bag wt cannot avobe and value would be as maximum as possible...

-------------------------------------------------------------------------------------------

1. Recursion

Tc - O(2 ^ N)
Sc - O(N)
------------------< GFG >----------------------------


class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here 
         return helper(wt, val, n - 1, W);
    } 
     static int helper(int[] weight, int[] value, int ind, int maxWeight)
    {
        if(ind == 0)
        {
            if(weight[0] <= maxWeight) return value[0];
            return 0;
        }

        int notPick = helper(weight, value, ind - 1, maxWeight);
        int pick = Integer.MIN_VALUE;
        if(weight[ind] <= maxWeight)
        pick = value[ind] + helper(weight, value, ind - 1, maxWeight - weight[ind]);

        return Math.max(pick, notPick);
    }
}


---------------- <NINJA > ---------------------------
import java.util.* ;
import java.io.*; 

public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {

            /* Your class should be named Solution
            * Don't write main().
            * Don't read input, it is passed as function argument.
            * Change in the given tree itself.
            * No need to return or print the output.
            * Taking input and printing output is handled automatically.
            */
            return helper(weight, value, n - 1, maxWeight);

    }
    public static int helper(int[] weight, int[] value, int ind, int maxWeight)
    {
        if(ind == 0)
        {
            if(weight[0] <= maxWeight) return value[0];
            return 0;
        }

        int notPick = helper(weight, value, ind - 1, maxWeight);
        int pick = Integer.MIN_VALUE;
        if(weight[ind] <= maxWeight)
        pick = value[ind] + helper(weight, value, ind - 1, maxWeight - weight[ind]);

        return Math.max(pick, notPick);
    }
}









2. Memoization

Tc - O(N * W)
Sc - O(N) + O(N * W)

-----------< ninja > --------------------------

import java.util.* ;
import java.io.*; 

public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {

            int dp[][] = new int[n][maxWeight + 1];
            for(int row[] : dp)
            Arrays.fill(row, -1);

            return helper(weight, value, n - 1, maxWeight, dp);

    }
    public static int helper(int[] weight, int[] value, int ind, int maxWeight, int dp[][])
    {
        if(ind == 0)
        {
            if(weight[0] <= maxWeight) return value[0];
            return 0;
        }
        if(dp[ind][maxWeight] != -1) return dp[ind][maxWeight];

        int notPick = helper(weight, value, ind - 1, maxWeight, dp);
        int pick = Integer.MIN_VALUE;
        if(weight[ind] <= maxWeight)
        pick = value[ind] + helper(weight, value, ind - 1, maxWeight - weight[ind], dp);

        return dp[ind][maxWeight] = Math.max(pick, notPick);
    }
}



-------------------------------< gfg > ------------------------------


class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here 
          int dp[][] = new int[n][W + 1];
            for(int row[] : dp)
            Arrays.fill(row, -1);
         return helper(wt, val, n - 1, W, dp);
    } 
    static int helper(int[] weight, int[] value, int ind, int maxWeight, int dp[][])
    {
        if(ind == 0)
        {
            if(weight[0] <= maxWeight) return value[0];
            return 0;
        }
        if(dp[ind][maxWeight] != -1) return dp[ind][maxWeight];

        int notPick = helper(weight, value, ind - 1, maxWeight, dp);
        int pick = Integer.MIN_VALUE;
        if(weight[ind] <= maxWeight)
        pick = value[ind] + helper(weight, value, ind - 1, maxWeight - weight[ind], dp);

        return dp[ind][maxWeight] = Math.max(pick, notPick);
    }
}





3. Tabulation

-----------------------< gfg >-----------------------------------

class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here 
          int dp[][] = new int[n][W + 1];
     
    for(int i = wt[0]; i <= W; i++)
      dp[0][i] = val[0];
    
    
        for(int ind = 1; ind < n; ind++)
        {
            for(int weight = 0; weight <= W; weight++)
            {
                int notPick = dp[ind - 1][weight];
                int pick = Integer.MIN_VALUE;
                if(wt[ind] <= weight)
                pick = val[ind] + dp[ind - 1][weight - wt[ind]];

                dp[ind][weight] = Math.max(pick, notPick);
            }
        }

        return dp[n - 1][W];
    }
}


------------------------------< ninja > ------------------------
import java.util.* ;
import java.io.*; 

public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {

          
            int dp[][] = new int[n][maxWeight + 1];
            
       for(int i = weight[0]; i <= maxWeight; i++)
        dp[0][i] = value[0];


        for(int ind = 1; ind < n; ind++)
        {
            for(int cap = 0; cap <= maxWeight; cap++)
            {
                
               int notPick = dp[ind - 1][cap];
               int pick = Integer.MIN_VALUE;
               if(weight[ind] <= cap)
               pick = value[ind] + dp[ind - 1][cap - weight[ind]];

               dp[ind][cap] = Math.max(pick, notPick);
            }
        }      
        return dp[n - 1][maxWeight];
    }
}







4. Sapce optimization


-------------------< ninja > ------------------

import java.util.* ;
import java.io.*; 

public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {

          
            int prev[] = new int[maxWeight + 1];
            
       for(int i = weight[0]; i <= maxWeight; i++)
        prev[i] = value[0];


        for(int ind = 1; ind < n; ind++)
        {
            int cur[] = new int[maxWeight + 1];
            for(int cap = 0; cap <= maxWeight; cap++)
            {
                
               int notPick = prev[cap];
               int pick = Integer.MIN_VALUE;
               if(weight[ind] <= cap)
               pick = value[ind] + prev[cap - weight[ind]];

               cur[cap] = Math.max(pick, notPick);
            }
            prev = cur;
        }      
        return prev[maxWeight];
    }
}

----------------------------< gfg > ------------------------------

class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here 
          int prev[] = new int[W + 1];
     
    for(int i = wt[0]; i <= W; i++)
      prev[i] = val[0];
    
    
        for(int ind = 1; ind < n; ind++)
        {
            int cur[] = new int[W + 1];
            for(int weight = 0; weight <= W; weight++)
            {
                int notPick = prev[weight];
                int pick = Integer.MIN_VALUE;
                if(wt[ind] <= weight)
                pick = val[ind] + prev[weight - wt[ind]];

                cur[weight] = Math.max(pick, notPick);
            }
            prev = cur;
        }

        return prev[W];
    }
}





 Again optimization with only one row...prev[]

<ninja>

import java.util.* ;
import java.io.*; 

public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {

          
            int prev[] = new int[maxWeight + 1];
            
       for(int i = weight[0]; i <= maxWeight; i++)
        prev[i] = value[0];


        for(int ind = 1; ind < n; ind++)
        {
          
            for(int cap = maxWeight; cap >= 0; cap--)
            {
                
               int notPick = prev[cap];
               int pick = Integer.MIN_VALUE;
               if(weight[ind] <= cap)
               pick = value[ind] + prev[cap - weight[ind]];

               prev[cap] = Math.max(pick, notPick);
            }
     
        }      
        return prev[maxWeight];
    }
}