Moore's VOTIMG Algo   *****Optimal

class Solution {
    public int majorityElement(int[] nums) {
        int element = 0, count = 0;
        for(int i = 0; i < nums.length; i++)
        {
            if(count == 0)
            {
                element = nums[i];
                count += 1;
            }
            else if(nums[i] == element) count += 1;
            else count -= 1;
        }
        //now again run a loop and chech is the elemnent is really majority or not
        int cnt = 0;
        for(int i = 0; i < nums.length; i++)
        {
            if(nums[i] == element)
            cnt++;

            if(cnt > nums.length / 2) return nums[i];
        }
        return -1;
    }
}


****Brute*****
class Solution {
    public int majorityElement(int[] nums) {
        for(int i=0;i<nums.length;i++)
        {
            int count=0;
            for(int j=0;j<nums.length;j++)
            {
                if( nums[i]==nums[j] ) count++;
            }
            if(count>nums.length/2) return nums[i];
        }
        return -1;
        
    }
}

***Better******<using map>

class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }
        for(Map.Entry<Integer, Integer> entry : map.entrySet())
        if(entry.getValue() > nums.length / 2) return entry.getKey();

        return -1;
    }
}


