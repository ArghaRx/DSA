/*
Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.

 

Example 1:

Input: nums = [3,2,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2.
The third distinct maximum is 1.
Example 2:

Input: nums = [1,2]
Output: 2
Explanation:
The first distinct maximum is 2.
The second distinct maximum is 1.
The third distinct maximum does not exist, so the maximum (2) is returned instead.
Example 3:

Input: nums = [2,2,3,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2 (both 2's are counted together since they have the same value).
The third distinct maximum is 1.
*/



// My solution
class Solution {
    public int thirdMax(int[] nums) {
        Arrays.sort(nums);
        int last = 0;
        int k = 3;
        for(int i = nums.length - 1; i >= 0; i--)
        {
            if(i == nums.length - 1)
            {
                last = nums[nums.length - 1];
                k--;
                continue;
            }
            if(nums[i] != last && k == 1) return nums[i];
            if(nums[i] != last && k != 1)
            {
                k--;
                last = nums[i];
            }
            else continue;
        }
        if(k >= 1) return nums[nums.length - 1];
        return 0;
    }
}


// easy but same approach
import java.util.Arrays;

class Solution {
    public int thirdMax(int[] nums) {
        Arrays.sort(nums);
        int last = nums[nums.length - 1];  // Start with the largest number
        int distinctCount = 1;  // We've seen the largest number already

        for (int i = nums.length - 2; i >= 0; i--) {
            if (nums[i] != last) {
                last = nums[i];
                distinctCount++;
                if (distinctCount == 3) {
                    return nums[i];  // Found the third distinct max
                }
            }
        }

        // If there are less than three distinct numbers, return the max
        return nums[nums.length - 1];
    }
}