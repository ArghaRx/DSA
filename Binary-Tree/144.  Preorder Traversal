PreOrder Traversal :-

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val; 
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        ArrayList <Integer> preorder = new ArrayList<>();
        
        if(root == null)
        return preorder;

        Stack <TreeNode> s =new Stack<>();
        s.push(root);

        while(!s.isEmpty())
        {
            root = s.pop();
            preorder.add(root.val);

            if(root.right != null)
            s.push(root.right);

            if(root.left != null)
            s.push(root.left);
        }
        return preorder;
    }
}



Using Recursion :-

import java.util.*;
class Solution {
    public void preOrder (TreeNode node , List<Integer> ans)
    {
        if (node == null)
         return ;
        
      ans.add(node.val);
        preOrder(node.left, ans);
        preOrder(node.right, ans);

    }
    public List<Integer> preorderTraversal(TreeNode root) {
        ArrayList < Integer > ans = new ArrayList<>();
        if ( root == null )
        return ans;

        preOrder ( root , ans );
        return ans;
    }
}

Time Complexity: O(N).
Reason: We are traversing N nodes and every node is visited exactly once.

Space Complexity: O(N)
Reason: Space is needed for the recursion stack. In the worst case (skewed tree), space complexity can be O(N).

