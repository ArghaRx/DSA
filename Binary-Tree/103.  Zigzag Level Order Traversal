
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        Queue <TreeNode> queue = new LinkedList <>();
        List<List<Integer>> wraplist = new ArrayList<>();
        if (root == null) return wraplist;
        boolean flag = true;
        queue.offer(root);
        while (!queue.isEmpty())
        {
            int levelNum = queue.size();
            ArrayList<Integer> sublist = new ArrayList<>(levelNum);
            for (int i = 0; i < levelNum; i++)
            {
            
                TreeNode current = queue.poll();

                // Check if the current node is not null before accessing its properties
                if (current != null)
               {
                 if (current.left != null) queue.offer(current.left);
                 if (current.right != null) queue.offer(current.right);

                 if (flag == true)
                 sublist.add(current.val);
                 else
                 sublist.add(0, current.val);
                }
            }

            flag = !flag;
    //flag = !flag; is used to toggle the value of the flag variable. In the context  of your code, it is used to alternate the direction of insertion into the sublist for each level of the binary tree.
            wraplist.add(sublist);
           
        }
        return wraplist;
    }
}
