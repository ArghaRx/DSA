in codeninja___


/*********************************************************

 Following is the TreeNode structure:

 class TreeNode {
     int data;
     TreeNode left;
     TreeNode right;
     TreeNode() {
         this.data = 0;
         this.left = null;
         this.right = null;
     }
     TreeNode(int data) {
         this.data = data;
         this.left = null;
         this.right = null;
     }
     TreeNode(int data, TreeNode left, TreeNode right) {
         this.data = data;
         this.left = left;
         this.right = right;
     }
 };
 ********************************************************/

import java.util.*;
public class Solution {

 static class Pair {
        TreeNode node;
        int num;

        Pair(TreeNode node, int num) {
            this.node = node;
            this.num = num;
        }
    }

    public static List<List<Integer>> getTreeTraversal(TreeNode root) {
        // Write your code here.
       Stack<Pair> st = new Stack<Pair> ();
        st.push(new Pair(root,1));

        List<List<Integer>> result = new ArrayList<>(); 

        ArrayList <Integer> pre = new ArrayList<>();
        ArrayList <Integer> in = new ArrayList<>();
        ArrayList <Integer> post = new ArrayList<>();

        if (root == null) return result;

        while (!st.isEmpty())
        {
            Pair it = st.pop();

            if(it.num == 1)
            {
                pre.add(it.node.data);
                it.num ++ ;
                st.push(it);

                if(it.node.left != null)
                 st.push(new Pair(it.node.left , 1));
            }

            else if (it.num == 2)
            {
                in.add(it.node.data);
                it.num ++;
                st.push(it);

                if (it.node.right != null)
                {
                    st.push(new Pair(it.node.right,1));
                }
            }

            else
            post.add(it.node.data);
        }
        result.add(pre);
        result.add(in);
        result.add(post);

        return result;
    }
}
