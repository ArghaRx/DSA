/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null) return true;

        return isSame( root.left, root.right);

    }
    public static boolean isSame(TreeNode root1,TreeNode root2)
    {
        if(root1 == null || root2 == null) 
        return root1==root2 ; 
            
       return (root1.val == root2.val && isSame(root1.left, root2.right) && 
                isSame(root1.right, root2.left));    
        

    }
}



Time Complexity: O(N)

Reason: We are doing simple tree traversal and changing both root1 and root2 simultaneously.

Space Complexity: O(N)

Reason: In the worst case (skewed tree), space complexity can be O(N).
